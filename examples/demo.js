// Generated by CoffeeScript 1.7.1
var TOKEN, Tinysou, args, collection, display, document, engine, k, tasks, tinysou;

Tinysou = require('tinysou');

TOKEN = 'YOUR_TOKEN';

engine = {
  name: 'blog',
  display_name: 'Blog'
};

collection = {
  name: 'post',
  field_types: {
    title: 'string',
    tags: 'string',
    author: 'enum',
    date: 'date',
    body: 'text'
  }
};

document = {
  title: 'My First Post',
  tags: ['news'],
  author: 'Author',
  date: '2014-08-16T00:00:00Z',
  body: 'Tinysou start online today!'
};

tinysou = new Tinysou(TOKEN);

display = function(msg, err, res) {
  console.log(msg);
  if (err) {
    return console.log(err);
  } else {
    return console.log(res);
  }
};

tasks = {
  listEngines: function() {
    return tinysou.engines.list(function(err, res) {
      return display('List engines', err, res);
    });
  },
  createEngine: function() {
    return tinysou.engines.create(engine, function(err, res) {
      return display('Create an engine', err, res);
    });
  },
  getEngine: function() {
    return tinysou.engines.get(engine.name, function(err, res) {
      return display('Get an engine', err, res);
    });
  },
  updateEngine: function() {
    return tinysou.engines.update(engine.name, engine, function(err, res) {
      return display('Update an engine', err, res);
    });
  },
  deleteEngine: function() {
    return tinysou.engines["delete"](engine.name, function(err, res) {
      return display('Delete an engine', err, res);
    });
  },
  listCollections: function() {
    return tinysou.collections.list(engine.name, function(err, res) {
      return display("List collections in " + engine.name, err, res);
    });
  },
  createCollection: function() {
    return tinysou.collections.create(engine.name, collection, function(err, res) {
      return display('Create a collection', err, res);
    });
  },
  getCollection: function() {
    return tinysou.collections.get(engine.name, collection.name, function(err, res) {
      return display('Get a collection', err, res);
    });
  },
  deleteCollection: function() {
    return tinysou.collections["delete"](engine.name, collection.name, function(err, res) {
      return display('Delete a collection', err, res);
    });
  },
  listDocuments: function() {
    return tinysou.documents.list(engine.name, collection.name, function(err, res) {
      return display("List documents in " + collection.name, err, res);
    });
  },
  createDocument: function() {
    return tinysou.documents.create(engine.name, collection.name, document, function(err, res) {
      return display('Create a document', err, res);
    });
  },
  getDocument: function() {
    return tinysou.documents.list(engine.name, collection.name, function(err, res) {
      var document_id;
      if (err) {
        return console.log(err);
      } else if (res.length > 0) {
        document_id = res[0].id;
        return tinysou.documents.get(engine.name, collection.name, document_id, function(err, res) {
          return display('Get a document', err, res);
        });
      } else {
        return console.log('Please create a document first');
      }
    });
  },
  updateDocument: function() {
    return tinysou.documents.list(engine.name, collection.name, function(err, res) {
      var document_id;
      if (err) {
        return console.log(err);
      } else if (res.length > 0) {
        document_id = res[0].id;
        return tinysou.documents.update(engine.name, collection.name, document_id, document, function(err, res) {
          return display('Update a document', err, res);
        });
      } else {
        return console.log('Please create a document first');
      }
    });
  },
  deleteDocument: function() {
    return tinysou.documents.list(engine.name, collection.name, function(err, res) {
      var document_id;
      if (err) {
        return console.log(err);
      } else if (res.length > 0) {
        document_id = res[0].id;
        return tinysou.documents["delete"](engine.name, collection.name, document_id, function(err, res) {
          return display('Delete a document', err, res);
        });
      } else {
        return console.log('Please create a document first');
      }
    });
  }
};

args = process.argv;

if (args.length === 3 && args[2] in tasks) {
  tasks[args[2]]();
} else {
  console.log('Available arguments are:');
  for (k in tasks) {
    console.log(k);
  }
}
